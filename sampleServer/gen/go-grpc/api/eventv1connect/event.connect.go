// Code generated by protoc-gen-connect-go.exe. DO NOT EDIT.
//
// Source: api/event.proto

package eventv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "sampleServer/gen/go/api"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// EventServiceName is the fully-qualified name of the EventService service.
	EventServiceName = "event.v1.EventService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EventServiceReceiveEventProcedure is the fully-qualified name of the EventService's ReceiveEvent
	// RPC.
	EventServiceReceiveEventProcedure = "/event.v1.EventService/ReceiveEvent"
)

// EventServiceClient is a client for the event.v1.EventService service.
type EventServiceClient interface {
	ReceiveEvent(context.Context, *connect_go.Request[v1.ReceiveEventRequest]) (*connect_go.Response[v1.ReceiveEventResponse], error)
}

// NewEventServiceClient constructs a client for the event.v1.EventService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEventServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) EventServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &eventServiceClient{
		receiveEvent: connect_go.NewClient[v1.ReceiveEventRequest, v1.ReceiveEventResponse](
			httpClient,
			baseURL+EventServiceReceiveEventProcedure,
			opts...,
		),
	}
}

// eventServiceClient implements EventServiceClient.
type eventServiceClient struct {
	receiveEvent *connect_go.Client[v1.ReceiveEventRequest, v1.ReceiveEventResponse]
}

// ReceiveEvent calls event.v1.EventService.ReceiveEvent.
func (c *eventServiceClient) ReceiveEvent(ctx context.Context, req *connect_go.Request[v1.ReceiveEventRequest]) (*connect_go.Response[v1.ReceiveEventResponse], error) {
	return c.receiveEvent.CallUnary(ctx, req)
}

// EventServiceHandler is an implementation of the event.v1.EventService service.
type EventServiceHandler interface {
	ReceiveEvent(context.Context, *connect_go.Request[v1.ReceiveEventRequest]) (*connect_go.Response[v1.ReceiveEventResponse], error)
}

// NewEventServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEventServiceHandler(svc EventServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	eventServiceReceiveEventHandler := connect_go.NewUnaryHandler(
		EventServiceReceiveEventProcedure,
		svc.ReceiveEvent,
		opts...,
	)
	return "/event.v1.EventService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EventServiceReceiveEventProcedure:
			eventServiceReceiveEventHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEventServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEventServiceHandler struct{}

func (UnimplementedEventServiceHandler) ReceiveEvent(context.Context, *connect_go.Request[v1.ReceiveEventRequest]) (*connect_go.Response[v1.ReceiveEventResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("event.v1.EventService.ReceiveEvent is not implemented"))
}
