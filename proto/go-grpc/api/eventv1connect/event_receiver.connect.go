// Code generated by protoc-gen-connect-go.exe. DO NOT EDIT.
//
// Source: api/event_receiver.proto

package eventv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	api "github.com/tashinoki/logistic_app_tentative/proto/go/api"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// EventReceiverServiceName is the fully-qualified name of the EventReceiverService service.
	EventReceiverServiceName = "event.v1.EventReceiverService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EventReceiverServiceReceiveEventProcedure is the fully-qualified name of the
	// EventReceiverService's ReceiveEvent RPC.
	EventReceiverServiceReceiveEventProcedure = "/event.v1.EventReceiverService/ReceiveEvent"
)

// EventReceiverServiceClient is a client for the event.v1.EventReceiverService service.
type EventReceiverServiceClient interface {
	ReceiveEvent(context.Context, *connect_go.Request[api.ReceiveEventRequest]) (*connect_go.Response[api.ReceiveEventResponse], error)
}

// NewEventReceiverServiceClient constructs a client for the event.v1.EventReceiverService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEventReceiverServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) EventReceiverServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &eventReceiverServiceClient{
		receiveEvent: connect_go.NewClient[api.ReceiveEventRequest, api.ReceiveEventResponse](
			httpClient,
			baseURL+EventReceiverServiceReceiveEventProcedure,
			opts...,
		),
	}
}

// eventReceiverServiceClient implements EventReceiverServiceClient.
type eventReceiverServiceClient struct {
	receiveEvent *connect_go.Client[api.ReceiveEventRequest, api.ReceiveEventResponse]
}

// ReceiveEvent calls event.v1.EventReceiverService.ReceiveEvent.
func (c *eventReceiverServiceClient) ReceiveEvent(ctx context.Context, req *connect_go.Request[api.ReceiveEventRequest]) (*connect_go.Response[api.ReceiveEventResponse], error) {
	return c.receiveEvent.CallUnary(ctx, req)
}

// EventReceiverServiceHandler is an implementation of the event.v1.EventReceiverService service.
type EventReceiverServiceHandler interface {
	ReceiveEvent(context.Context, *connect_go.Request[api.ReceiveEventRequest]) (*connect_go.Response[api.ReceiveEventResponse], error)
}

// NewEventReceiverServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEventReceiverServiceHandler(svc EventReceiverServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	eventReceiverServiceReceiveEventHandler := connect_go.NewUnaryHandler(
		EventReceiverServiceReceiveEventProcedure,
		svc.ReceiveEvent,
		opts...,
	)
	return "/event.v1.EventReceiverService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EventReceiverServiceReceiveEventProcedure:
			eventReceiverServiceReceiveEventHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEventReceiverServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEventReceiverServiceHandler struct{}

func (UnimplementedEventReceiverServiceHandler) ReceiveEvent(context.Context, *connect_go.Request[api.ReceiveEventRequest]) (*connect_go.Response[api.ReceiveEventResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("event.v1.EventReceiverService.ReceiveEvent is not implemented"))
}
