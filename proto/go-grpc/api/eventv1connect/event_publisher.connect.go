// Code generated by protoc-gen-connect-go.exe. DO NOT EDIT.
//
// Source: api/event_publisher.proto

package eventv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	api "proto/go/api"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// EventPublisherServiceName is the fully-qualified name of the EventPublisherService service.
	EventPublisherServiceName = "event.v1.EventPublisherService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EventPublisherServicePublishEventProcedure is the fully-qualified name of the
	// EventPublisherService's PublishEvent RPC.
	EventPublisherServicePublishEventProcedure = "/event.v1.EventPublisherService/PublishEvent"
)

// EventPublisherServiceClient is a client for the event.v1.EventPublisherService service.
type EventPublisherServiceClient interface {
	PublishEvent(context.Context, *connect_go.Request[api.PublishEventRequest]) (*connect_go.Response[api.PublishEventResponse], error)
}

// NewEventPublisherServiceClient constructs a client for the event.v1.EventPublisherService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEventPublisherServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) EventPublisherServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &eventPublisherServiceClient{
		publishEvent: connect_go.NewClient[api.PublishEventRequest, api.PublishEventResponse](
			httpClient,
			baseURL+EventPublisherServicePublishEventProcedure,
			opts...,
		),
	}
}

// eventPublisherServiceClient implements EventPublisherServiceClient.
type eventPublisherServiceClient struct {
	publishEvent *connect_go.Client[api.PublishEventRequest, api.PublishEventResponse]
}

// PublishEvent calls event.v1.EventPublisherService.PublishEvent.
func (c *eventPublisherServiceClient) PublishEvent(ctx context.Context, req *connect_go.Request[api.PublishEventRequest]) (*connect_go.Response[api.PublishEventResponse], error) {
	return c.publishEvent.CallUnary(ctx, req)
}

// EventPublisherServiceHandler is an implementation of the event.v1.EventPublisherService service.
type EventPublisherServiceHandler interface {
	PublishEvent(context.Context, *connect_go.Request[api.PublishEventRequest]) (*connect_go.Response[api.PublishEventResponse], error)
}

// NewEventPublisherServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEventPublisherServiceHandler(svc EventPublisherServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	eventPublisherServicePublishEventHandler := connect_go.NewUnaryHandler(
		EventPublisherServicePublishEventProcedure,
		svc.PublishEvent,
		opts...,
	)
	return "/event.v1.EventPublisherService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EventPublisherServicePublishEventProcedure:
			eventPublisherServicePublishEventHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEventPublisherServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEventPublisherServiceHandler struct{}

func (UnimplementedEventPublisherServiceHandler) PublishEvent(context.Context, *connect_go.Request[api.PublishEventRequest]) (*connect_go.Response[api.PublishEventResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("event.v1.EventPublisherService.PublishEvent is not implemented"))
}
